2024.11.11 

SISRS input (Raw Reads):
/data/schwartzlab/Biancani/data/mammals

SISRS scripts:
/data/schwartzlab/Biancani/PLACENTAL/SISRS

SISRS Output Directory:
/data/schwartzlab/Biancani/PLACENTAL/SISRS_out

SISRS loci (aligned contigs) folder:
LOCI=/data/schwartzlab/Biancani/PLACENTAL/SISRS_out/SISRS_Run/aligned_contigs
_______________________________

Restarting post-SISRS analysis:
Github: https://github.com/LMBiancani/PlacentalPolytomy.git

cd /data/schwartzlab/Biancani/
git clone https://github.com/LMBiancani/PlacentalPolytomy.git

cd /data/schwartzlab/Biancani/PlacentalPolytomy/01_FilterByTaxa/
nano 01.00_FilterByTaxa.sh
_______________________________
#!/bin/sh
#SBATCH --job-name="filter"
#SBATCH --time=30:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node - just use 1 
#SBATCH --mail-user="biancani@uri.edu" #CHANGE to your email
#SBATCH --mail-type=ALL

## UPDATE PATHS:
# path to SISRS loci (aligned contigs) folder:
LOCI=/data/schwartzlab/Biancani/PLACENTAL/SISRS_out/SISRS_Run/aligned_contigs
# path to folder containing filterByTaxa scripts:
SCRIPTS=/data/schwartzlab/Biancani/PlacentalPolytomy/01_FilterByTaxa
# path to taxon group table (csv):
TXNGROUPS=/data/schwartzlab/Biancani/PlacentalPolytomy/01_FilterByTaxa/groups.csv
# path to output folder for filtered loci (will be created by script if necessary):
OUTPUT=/data/schwartzlab/Biancani/PlacentalPolytomy/output/01_SISRS_loci_filtered

## UPDATE parameters:
SEQCOMPLETE=0.33 # taxon sequence completeness, (e.g. 0.33 is 33% non N)
MINTAXA=18 # minimum number taxa to be present, e.g. 18
MINGROUPS=4 # minimum number of taxon groups to be present, e.g. 4

echo "Total number of unfiltered SISRS loci:"
ls -1U $LOCI | wc -l

cd $SLURM_SUBMIT_DIR

module purge
#for URI's Andromeda cluster
module load Biopython/1.78-foss-2020b 

mkdir -p $OUTPUT
python $SCRIPTS/filter_SISRS_output.py $TXNGROUPS $LOCI $OUTPUT $SEQCOMPLETE $MINTAXA $MINGROUPS

echo "Number of filtered SISRS loci:"
ls -1U $OUTPUT | wc -l
_______________________________
sbatch -q schwartzlab 01.00_FilterByTaxa.sh
Submitted batch job 348540
Job ID: 348540
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:14:45
CPU Efficiency: 3.86% of 06:21:38 core-walltime
Job Wall-clock time: 06:21:38
Memory Utilized: 610.78 MB
Memory Efficiency: 29.82% of 2.00 GB

2024.11.12

Run job with just count loci lines:
###
echo "Total number of unfiltered SISRS loci:"
ls -1U $LOCI | wc -l
echo "Number of filtered SISRS loci:"
ls -1U $OUTPUT | wc -l
###
Submitted batch job 348557
Job ID: 348557
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:14
CPU Efficiency: 1.38% of 00:16:53 core-walltime
Job Wall-clock time: 00:16:53
Memory Utilized: 524.00 KB
Memory Efficiency: 0.02% of 2.00 GB

Total number of unfiltered SISRS loci:
3,510,445
Number of filtered SISRS loci:
109,799

2025.03.24 - rerunning prior analysis steps

cd /data/schwartzlab/Biancani/PlacentalPolytomy/02_IQtree

02.00_iqtree_prep.sh
_______________________________
#!/bin/bash
#SBATCH --job-name="IQprep"
#SBATCH --time=1:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G
#SBATCH --mail-user="biancani@uri.edu"
#SBATCH --mail-type=ALL

## UPDATE PATHS:
# path to project directory:
PROJECT=/data/schwartzlab/Biancani/PlacentalPolytomy
# path to FILTERED SISRS loci (aligned contigs):
INPUT=$PROJECT/output/01_SISRS_loci_filtered
# path to output folder for IQ-TREE (will be created by script if necessary):
OUTPUT=$PROJECT/output/02_iqtree_assessment
## PREP for 02.02_iqtree_array_concat.sh:
CAT_OUT=$OUTPUT/02.02_concat_trees

# UPDATE PARAMETERS:
# number of simultaneous tasks for subsequent array jobs:
TASKS=40

mkdir -p ${OUTPUT}
cd ${OUTPUT}
mkdir scf
# extract filenames from INPUT and split into bins of 4000 loci
ls ${INPUT} | rev | cut -f1 -d/ | rev | split -l 4000 - aligned_loci_list_
arrayN=$(ls aligned_loci_list_* | wc -l)
ls aligned_loci_list_* > array_list.txt
if [ $arrayN -lt $TASKS ]
    then
      TASKS=$arrayN
fi

## PREP for 02.02_iqtree_array_concat.sh:
mkdir -p $CAT_OUT
ln $OUTPUT/array_list.txt $CAT_OUT/
ln $OUTPUT/aligned_loci_list_* $CAT_OUT/

echo "#SBATCH --array=[1-${arrayN}]%${TASKS}"
_______________________________
sbatch -q schwartzlab 02.00_iqtree_prep.sh
Submitted batch job 363263
Job ID: 363263
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:01
CPU Efficiency: 2.22% of 00:00:45 core-walltime
Job Wall-clock time: 00:00:45
Memory Utilized: 15.90 MB
Memory Efficiency: 0.26% of 6.00 GB

output:
#SBATCH --array=[1-28]%28

cd /data/schwartzlab/Biancani/PlacentalPolytomy/02_IQtree

02.01_iqtree_array.sh
_______________________________
#!/bin/bash
#SBATCH --job-name="IQarr"
#SBATCH --time=48:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH -c 1
#SBATCH --mem-per-cpu=6G
#SBATCH --array=[1-28]%28 ## UPDATE based on output from 02.00_iqtree_prep.sh
#SBATCH --mail-user="biancani@uri.edu" ## UPDATE
#SBATCH --mail-type=ALL

## UPDATE PATHS as necessary:

# path to project directory:
PROJECT=/data/schwartzlab/Biancani/PlacentalPolytomy
# path to output folder for IQ-TREE (will be created by script if necessary):
OUTPUT=$PROJECT/output/02_iqtree_assessment
# path to FILTERED SISRS loci (aligned contigs):
INPUT=$PROJECT/output/01_SISRS_loci_filtered
# path to IQ-TREE executale:
IQTREE="/data/schwartzlab/Biancani/Software/iqtree-2.1.2-Linux/bin/iqtree2"

# output for concatenated trees (directory created by 02.00_iqtree_prep.sh)
CAT_OUT=$OUTPUT/02.02_concat_trees
# location of iqtree scripts:
scripts_dir=$PROJECT/02_IQtree
# path to file containing alternative hypotheses trees:
trees_to_eval=$scripts_dir/hypothesis_trees/Polytomy_Placental_Hypotheses.tree

## Specify taxon list for each hypothesis tree:
# For Placental root question: Determine which 2 out of 3 groups are sisters for each hypothesis and select one of the sisters.
# List 1 (Afrotheria Out) = Xenarthra
focal_tips1=$scripts_dir/hypothesis_trees/tips_Xenarthra.txt
# List 2 (Boreoeutheria Out) = Afrotheria
focal_tips2=$scripts_dir/hypothesis_trees/tips_Afrotheria.txt
# List 3 (Xenarthra Out) = Boreoeutheria
focal_tips3=$scripts_dir/hypothesis_trees/tips_Boreoeutheria.txt
# Outgroup taxa list:
outgroup_tips=$scripts_dir/hypothesis_trees/tips_Outgroup.txt

cd ${OUTPUT}

date
module load R/4.0.3-foss-2020b

#generate list of filenames for aligned loci:
fileline=$(sed -n ${SLURM_ARRAY_TASK_ID}p array_list.txt)

#create output csv file for each batch fasta file created by prep script (aka each slurm task):
> LnLs_${SLURM_ARRAY_TASK_ID}.csv

cat ${fileline} | while read line
do
	echo $line
	Rscript ${scripts_dir}/trimTrees.R ${INPUT}/${line} ${trees_to_eval} ./trees_${line}.tre
	
	sed -n 1p ./trees_${line}.tre > ./tree1_${line}.tre # select constraint tree from tree file
	${IQTREE} -nt 1 -t ./tree1_${line}.tre -s ${INPUT}/${line} --scf 500 --prefix concord1_${line}
	echo "ID,sCF,sCF_N,sDF1,sDF1_N,sDF2,sDF2_N,sN,debug" > scf/scf_${line}
	Rscript ${scripts_dir}getSCF.R concord1_${line}.cf.branch concord1_${line}.cf.stat ${focal_tips1} ${outgroup_tips} >> scf/scf_${line}
	${IQTREE} -nt 1 -s ${INPUT}/${line} -pre calcLnL_${line} -g ./tree1_${line}.tre -m GTR+G -redo #calculate likelihoods
	echo $line","$(grep "BEST SCORE FOUND" calcLnL_${line}.log | cut -f2 -d: ) >> LnLs_${SLURM_ARRAY_TASK_ID}.csv #pulls likelihood from file
	rm concord1_${line}.log concord1_${line}.cf.branch concord1_${line}.cf.stat concord1_${line}.cf.tree concord1_${line}.cf.tree.nex
	rm ./tree1_${line}.tre
	
	sed -n 2p ./trees_${line}.tre > ./tree2_${line}.tre
	${IQTREE} -nt 1 -t ./tree2_${line}.tre -s ${INPUT}/${line} --scf 500 --prefix concord2_${line}
	Rscript ${scripts_dir}getSCF.R concord2_${line}.cf.branch concord2_${line}.cf.stat ${focal_tips2} ${outgroup_tips} >> scf/scf_${line}
	${IQTREE} -nt 1 -s ${INPUT}/${line} -pre calcLnL_${line} -g ./tree2_${line}.tre -m GTR+G -redo
	echo $line","$(grep "BEST SCORE FOUND" calcLnL_${line}.log | cut -f2 -d: ) >> LnLs_${SLURM_ARRAY_TASK_ID}.csv
	rm concord2_${line}.log concord2_${line}.cf.branch concord2_${line}.cf.stat concord2_${line}.cf.tree concord2_${line}.cf.tree.nex
	rm ./tree2_${line}.tre

	sed -n 3p ./trees_${line}.tre > ./tree3_${line}.tre
	${IQTREE} -nt 1 -t ./tree3_${line}.tre -s ${INPUT}/${line} --scf 500 --prefix concord3_${line}
	Rscript ${scripts_dir}getSCF.R concord3_${line}.cf.branch concord3_${line}.cf.stat ${focal_tips3} ${outgroup_tips} >> scf/scf_${line}
	${IQTREE} -nt 1 -s ${INPUT}/${line} -pre calcLnL_${line} -g ./tree3_${line}.tre -m GTR+G -redo
	echo $line","$(grep "BEST SCORE FOUND" calcLnL_${line}.log | cut -f2 -d: ) >> LnLs_${SLURM_ARRAY_TASK_ID}.csv
	rm concord3_${line}.log concord3_${line}.cf.branch concord3_${line}.cf.stat concord3_${line}.cf.tree concord3_${line}.cf.tree.nex
	rm ./tree3_${line}.tre
	
	# rm lines re-written below to prevent returning an error exit status if file does not exist
	for file in ./trees_${line}.tre calcLnL_${line}.ckp.gz calcLnL_${line}.iqtree calcLnL_${line}.log calcLnL_${line}.treefile calcLnL_${line}.trees calcLnL_${line}.uniqueseq.phy calcLnL_${line}.parstree
	do
	  if [ -f $file ] # test to see if file exists
	  then rm $file
	  else echo "rm: cannot remove $file: No such file or directory"
	  fi
	done
done
_______________________________
sbatch -q schwartzlab 02.01_iqtree_array.sh
Submitted batch job 363264


2025.03.25

cd /data/schwartzlab/Biancani/PlacentalPolytomy/03_Annotation

03.00_DownloadReference.sh
_______________________________
#!/bin/sh
#SBATCH --job-name="download_reference"
#SBATCH --time=10:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=1   # processor core(s) per node
#SBATCH --mail-user="biancani@uri.edu" #CHANGE to your email
#SBATCH --mail-type=ALL

## UPDATE PATHS:
# path to project directory:
PROJECT=/data/schwartzlab/Biancani/PlacentalPolytomy
# path to output folder for annotation (will be created by script if necessary):
OUTPUT=$PROJECT/output/03_Annotation
# path to folder for reference genome (will be created by script if necessary):
RefDir=$OUTPUT/ReferenceGenome

## UPDATE URLs:
#URL for GFF format reference annotation file: 
ANNOTATION="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/880/755/GCF_002880755.1_Clint_PTRv2/GCF_002880755.1_Clint_PTRv2_genomic.gff.gz"
#URL for fasta format reference genome:
GENOME="https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/002/880/755/GCF_002880755.1_Clint_PTRv2/GCF_002880755.1_Clint_PTRv2_genomic.fna.gz"

mkdir -p $RefDir
cd $RefDir

for i in $ANNOTATION $GENOME
do
  #download file:
  wget --tries=0 --retry-connrefused --continue --timeout=30 --progress=dot:giga $i
  #extract filename from URL:
  name=$(echo $i | rev | cut -d '/' -f 1 | rev)
  #decompress file:
  gunzip $name
done
_______________________________
sbatch -q schwartzlab 03.00_DownloadReference.sh
Submitted batch job 363295
Job ID: 363295
Cluster: andromeda
User/Group: biancani/schwartzlab
State: COMPLETED (exit code 0)
Cores: 1
CPU Utilized: 00:00:41
CPU Efficiency: 13.95% of 00:04:54 core-walltime
Job Wall-clock time: 00:04:54
Memory Utilized: 1.86 MB
Memory Efficiency: 0.09% of 2.00 GB



cd /data/schwartzlab/Biancani/PlacentalPolytomy/03_Annotation

03.01_Annotation.sh
_______________________________
#!/bin/bash
#SBATCH --job-name="annotate"
#SBATCH --time=100:00:00  # walltime limit (HH:MM:SS)
#SBATCH --nodes=1   # number of nodes
#SBATCH --ntasks-per-node=36   # processor core(s) per node
#SBATCH --mail-user="biancani@uri.edu" # CHANGE THIS to your user email address
#SBATCH --mail-type=ALL

## UPDATE:
# number of tasks/processor cores per node:
TASKS=36
# path to project directory:
PROJECT=/data/schwartzlab/Biancani/PlacentalPolytomy
# location of annotation scripts:
SCRIPTS=$PROJECT/03_Annotation
# path to FILTERED SISRS loci (aligned contigs) folder:
# path to FILTERED SISRS loci (aligned contigs):
LOCI=$PROJECT/output/01_SISRS_loci_filtered
# path to output folder for annotation (will be created by script if necessary):
OUTPUT=$PROJECT/output/03_Annotation

# name of study taxon closest to reference:
taxonName="Pan_troglodytes"
# path to FASTA format reference genome:
GENOME="$OUTPUT/ReferenceGenome/GCF_002880755.1_Clint_PTRv2_genomic.fna"
# path to GFF format reference annotation file:
ANNOTATION="$OUTPUT/ReferenceGenome/GCF_002880755.1_Clint_PTRv2_genomic.gff"
# select output mode (either counts of different annotation types, or length proportion of each annotations type)
## (`c`) count the number of each feature per locus, for ex. 1 CDS, 2 introns, etc.
## (`l`) compute proportion of length of each feature type per locus, for ex. 0.2 CDS, 0.8 introns
outputMode="l"

mkdir $OUTPUT
cd $OUTPUT

#Andromeda (URI's cluster) specific
module purge
module load Biopython/1.78-foss-2020b
#
python ${SCRIPTS}/annotation_getTaxContigs.py ${taxonName} ${LOCI}

#Andromeda (URI's cluster) specific
module purge
module load BLAST+
#

makeblastdb -in ${GENOME} -dbtype nucl

blastn -query ${taxonName}.fasta -db ${GENOME} -outfmt 6 -num_threads ${TASKS} > blast_results.blast

python3 ${SCRIPTS}/annotation_blast_parser.py blast_results.blast > full_table.bed

sort -k1,1 -k2,2n full_table.bed > full_table_sorted.bed

#Andromeda (URI's cluster) specific
module purge
module load BEDTools/2.27.1-foss-2018b
#

bedtools intersect -a full_table_sorted.bed -b ${ANNOTATION} -wa -wb > full_table_annotated.bed

python3 ${SCRIPTS}/annotation_bed2table.py full_table_annotated.bed ${outputMode} > annotations.csv

date
_______________________________
sbatch -q schwartzlab 03.01_Annotation.sh




cd /data/schwartzlab/Biancani/PlacentalPolytomy/02_IQtree

02.02_iqtree_array_concat.sh
_______________________________

_______________________________
sbatch -q schwartzlab 02.02_iqtree_array_concat.sh
